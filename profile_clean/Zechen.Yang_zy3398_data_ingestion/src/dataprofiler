import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import java.io.IOException;
import java.util.*;

public class dataprofiler extends Mapper<LongWritable, Text, Text, Text> {
    private static final String DELIMITER = ",";
    
    @Override
    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        String[] fields = value.toString().split(DELIMITER);
        
        // Skip header
        if (value.toString().startsWith("CMPLNT_NUM")) {
            return;
        }
        
        for (int i = 0; i < fields.length; i++) {
            String fieldValue = fields[i].trim();
            String fieldIndex = "Field_" + i;
            
            // Output field statistics
            context.write(new Text(fieldIndex + "_length"), new Text(String.valueOf(fieldValue.length())));
            context.write(new Text(fieldIndex + "_value"), new Text(fieldValue));
            
            // Check for null or empty values
            if (fieldValue.isEmpty() || fieldValue.equalsIgnoreCase("null")) {
                context.write(new Text(fieldIndex + "_null"), new Text("1"));
            }
            
            // Profile specific fields
            switch(i) {
                case 1: // CMPLNT_FR_DT
                case 3: // CMPLNT_TO_DT
                case 6: // RPT_DT
                    context.write(new Text("DATE_FIELD_" + i), new Text(fieldValue));
                    break;
                case 23: // SUSP_AGE_GROUP
                case 32: // VIC_AGE_GROUP
                    context.write(new Text("AGE_GROUP_" + i), new Text(fieldValue));
                    break;
                case 27: // Latitude
                case 28: // Longitude
                    context.write(new Text("COORDINATE_" + i), new Text(fieldValue));
                    break;
            }
        }
    }
}

class DataProfilerReducer extends Reducer<Text, Text, Text, Text> {
    @Override
    public void reduce(Text key, Iterable<Text> values, Context context) 
            throws IOException, InterruptedException {
        
        if (key.toString().endsWith("_length")) {
            // Calculate min, max, avg length
            int min = Integer.MAX_VALUE;
            int max = Integer.MIN_VALUE;
            long sum = 0;
            long count = 0;
            
            for (Text value : values) {
                int length = Integer.parseInt(value.toString());
                min = Math.min(min, length);
                max = Math.max(max, length);
                sum += length;
                count++;
            }
            
            String stats = String.format("min=%d,max=%d,avg=%.2f", min, max, (double)sum/count);
            context.write(key, new Text(stats));
        } else if (key.toString().endsWith("_null")) {
            // Count null values
            long nullCount = 0;
            for (Text value : values) {
                nullCount += Long.parseLong(value.toString());
            }
            context.write(key, new Text(String.valueOf(nullCount)));
        } else if (key.toString().startsWith("DATE_FIELD_") || 
                   key.toString().startsWith("AGE_GROUP_") ||
                   key.toString().startsWith("COORDINATE_")) {
            // Count distinct values and their frequencies
            Map<String, Integer> valueCount = new HashMap<>();
            for (Text value : values) {
                String val = value.toString();
                valueCount.put(val, valueCount.getOrDefault(val, 0) + 1);
            }
            context.write(key, new Text(valueCount.toString()));
        }
    }
}