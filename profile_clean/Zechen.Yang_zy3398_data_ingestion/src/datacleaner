import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.NullWritable;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.*;

public class datacleaner extends Mapper<LongWritable, Text, NullWritable, Text> {
    private static final String DELIMITER = ",";
    private final SimpleDateFormat inputDateFormat = new SimpleDateFormat("MM/dd/yyyy");
    private final SimpleDateFormat outputDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    
    @Override
    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        if (value.toString().startsWith("CMPLNT_NUM")) {
            context.write(NullWritable.get(), value);
            return;
        }
        
        String[] fields = value.toString().split(DELIMITER);
        if (fields.length < 33) {  // Assuming you need at least 33 fields
            context.getCounter("NYPD", "MalformedRecords").increment(1);
            return;
        }

        StringBuilder cleanedLine = new StringBuilder();
        
        for (int i = 0; i < fields.length; i++) {
            String cleanField = fields[i].trim()
                    .replaceAll("[\\r\\n]", "")  // Remove newlines
                    .replaceAll("\\s+", " ");    // Normalize whitespace
            
            // Clean date fields (indexes 1, 3, 6)
            if (i == 1 || i == 3 || i == 6) {
                cleanField = cleanDate(cleanField);
            }
            
            // Clean age groups (indexes 23, 32)
            if (i == 23 || i == 32) {
                cleanField = cleanAgeGroup(cleanField);
            }
            
            // Clean coordinates (indexes 27, 28)
            if (i == 27 || i == 28) {
                cleanField = cleanCoordinate(cleanField);
            }
            
            // Handle empty or null values
            if (cleanField.isEmpty() || cleanField.equalsIgnoreCase("null")) {
                cleanField = "UNKNOWN";
            }
            
            cleanedLine.append(cleanField);
            if (i < fields.length - 1) {
                cleanedLine.append(DELIMITER);
            }
        }
        
        context.write(NullWritable.get(), new Text(cleanedLine.toString()));
    }
    
    private String cleanDate(String date) {
        if (date.isEmpty()) return "UNKNOWN";
        try {
            synchronized(inputDateFormat) {
                Date parsedDate = inputDateFormat.parse(date);
                return outputDateFormat.format(parsedDate);
            }
        } catch (ParseException e) {
            return "INVALID_DATE";
        }
    }
    
    private String cleanAgeGroup(String ageGroup) {
        if (ageGroup.isEmpty()) return "UNKNOWN";
        return ageGroup.toUpperCase().trim();
    }
    
    private String cleanCoordinate(String coordinate) {
        if (coordinate.isEmpty()) return "0.0";
        try {
            return String.format("%.6f", Double.parseDouble(coordinate));
        } catch (NumberFormatException e) {
            return "0.0";
        }
    }
}